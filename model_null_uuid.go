/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * API version: v0.0.1-alpha.27
 * Contact: support@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NullUUID NullUUID can be used with the standard sql package to represent a UUID value that can be NULL in the database.
type NullUUID struct {
	UUID *string `json:"UUID,omitempty"`
	Valid *bool `json:"Valid,omitempty"`
}

// NewNullUUID instantiates a new NullUUID object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullUUID() *NullUUID {
	this := NullUUID{}
	return &this
}

// NewNullUUIDWithDefaults instantiates a new NullUUID object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullUUIDWithDefaults() *NullUUID {
	this := NullUUID{}
	return &this
}

// GetUUID returns the UUID field value if set, zero value otherwise.
func (o *NullUUID) GetUUID() string {
	if o == nil || o.UUID == nil {
		var ret string
		return ret
	}
	return *o.UUID
}

// GetUUIDOk returns a tuple with the UUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullUUID) GetUUIDOk() (*string, bool) {
	if o == nil || o.UUID == nil {
		return nil, false
	}
	return o.UUID, true
}

// HasUUID returns a boolean if a field has been set.
func (o *NullUUID) HasUUID() bool {
	if o != nil && o.UUID != nil {
		return true
	}

	return false
}

// SetUUID gets a reference to the given string and assigns it to the UUID field.
func (o *NullUUID) SetUUID(v string) {
	o.UUID = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *NullUUID) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullUUID) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *NullUUID) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *NullUUID) SetValid(v bool) {
	o.Valid = &v
}

func (o NullUUID) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UUID != nil {
		toSerialize["UUID"] = o.UUID
	}
	if o.Valid != nil {
		toSerialize["Valid"] = o.Valid
	}
	return json.Marshal(toSerialize)
}

type NullableNullUUID struct {
	value *NullUUID
	isSet bool
}

func (v NullableNullUUID) Get() *NullUUID {
	return v.value
}

func (v *NullableNullUUID) Set(val *NullUUID) {
	v.value = val
	v.isSet = true
}

func (v NullableNullUUID) IsSet() bool {
	return v.isSet
}

func (v *NullableNullUUID) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullUUID(val *NullUUID) *NullableNullUUID {
	return &NullableNullUUID{value: val, isSet: true}
}

func (v NullableNullUUID) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullUUID) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


