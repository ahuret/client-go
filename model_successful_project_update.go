/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * API version: latest
 * Contact: support@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SuccessfulProjectUpdate struct for SuccessfulProjectUpdate
type SuccessfulProjectUpdate struct {
	Project *ProjectNext `json:"project,omitempty"`
	// Import Warnings  Not all configuration items can be imported to Ory Cloud. For example, setting the port does not make sense because Ory Cloud provides the runtime and networking.  This field contains warnings where configuration keys were found but can not be imported. These keys will be ignored by Ory Cloud. This field will help you understand why certain configuration keys might not be respected!
	Warnings *[]Warning `json:"warnings,omitempty"`
}

// NewSuccessfulProjectUpdate instantiates a new SuccessfulProjectUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuccessfulProjectUpdate() *SuccessfulProjectUpdate {
	this := SuccessfulProjectUpdate{}
	return &this
}

// NewSuccessfulProjectUpdateWithDefaults instantiates a new SuccessfulProjectUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuccessfulProjectUpdateWithDefaults() *SuccessfulProjectUpdate {
	this := SuccessfulProjectUpdate{}
	return &this
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *SuccessfulProjectUpdate) GetProject() ProjectNext {
	if o == nil || o.Project == nil {
		var ret ProjectNext
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessfulProjectUpdate) GetProjectOk() (*ProjectNext, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *SuccessfulProjectUpdate) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given ProjectNext and assigns it to the Project field.
func (o *SuccessfulProjectUpdate) SetProject(v ProjectNext) {
	o.Project = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *SuccessfulProjectUpdate) GetWarnings() []Warning {
	if o == nil || o.Warnings == nil {
		var ret []Warning
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuccessfulProjectUpdate) GetWarningsOk() (*[]Warning, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SuccessfulProjectUpdate) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Warning and assigns it to the Warnings field.
func (o *SuccessfulProjectUpdate) SetWarnings(v []Warning) {
	o.Warnings = &v
}

func (o SuccessfulProjectUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableSuccessfulProjectUpdate struct {
	value *SuccessfulProjectUpdate
	isSet bool
}

func (v NullableSuccessfulProjectUpdate) Get() *SuccessfulProjectUpdate {
	return v.value
}

func (v *NullableSuccessfulProjectUpdate) Set(val *SuccessfulProjectUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableSuccessfulProjectUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableSuccessfulProjectUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuccessfulProjectUpdate(val *SuccessfulProjectUpdate) *NullableSuccessfulProjectUpdate {
	return &NullableSuccessfulProjectUpdate{value: val, isSet: true}
}

func (v NullableSuccessfulProjectUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuccessfulProjectUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


