/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * API version: v0.0.1-alpha.36
 * Contact: support@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// ProjectRecoveryConfig struct for ProjectRecoveryConfig
type ProjectRecoveryConfig struct {
	// Set to true to enable account recovery.
	Enabled *bool `json:"enabled,omitempty"`
}

// NewProjectRecoveryConfig instantiates a new ProjectRecoveryConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectRecoveryConfig() *ProjectRecoveryConfig {
	this := ProjectRecoveryConfig{}
	return &this
}

// NewProjectRecoveryConfigWithDefaults instantiates a new ProjectRecoveryConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectRecoveryConfigWithDefaults() *ProjectRecoveryConfig {
	this := ProjectRecoveryConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ProjectRecoveryConfig) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectRecoveryConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ProjectRecoveryConfig) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ProjectRecoveryConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o ProjectRecoveryConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	return json.Marshal(toSerialize)
}

type NullableProjectRecoveryConfig struct {
	value *ProjectRecoveryConfig
	isSet bool
}

func (v NullableProjectRecoveryConfig) Get() *ProjectRecoveryConfig {
	return v.value
}

func (v *NullableProjectRecoveryConfig) Set(val *ProjectRecoveryConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectRecoveryConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectRecoveryConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectRecoveryConfig(val *ProjectRecoveryConfig) *NullableProjectRecoveryConfig {
	return &NullableProjectRecoveryConfig{value: val, isSet: true}
}

func (v NullableProjectRecoveryConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectRecoveryConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


