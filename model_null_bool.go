/*
 * Ory APIs
 *
 * Documentation for all public and administrative Ory APIs. Administrative APIs can only be accessed with a valid Personal Access Token. Public APIs are mostly used in browsers. 
 *
 * API version: latest
 * Contact: support@ory.sh
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// NullBool NullBool implements the Scanner interface so
type NullBool struct {
	Bool *bool `json:"Bool,omitempty"`
	Valid *bool `json:"Valid,omitempty"`
}

// NewNullBool instantiates a new NullBool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullBool() *NullBool {
	this := NullBool{}
	return &this
}

// NewNullBoolWithDefaults instantiates a new NullBool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullBoolWithDefaults() *NullBool {
	this := NullBool{}
	return &this
}

// GetBool returns the Bool field value if set, zero value otherwise.
func (o *NullBool) GetBool() bool {
	if o == nil || o.Bool == nil {
		var ret bool
		return ret
	}
	return *o.Bool
}

// GetBoolOk returns a tuple with the Bool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullBool) GetBoolOk() (*bool, bool) {
	if o == nil || o.Bool == nil {
		return nil, false
	}
	return o.Bool, true
}

// HasBool returns a boolean if a field has been set.
func (o *NullBool) HasBool() bool {
	if o != nil && o.Bool != nil {
		return true
	}

	return false
}

// SetBool gets a reference to the given bool and assigns it to the Bool field.
func (o *NullBool) SetBool(v bool) {
	o.Bool = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *NullBool) GetValid() bool {
	if o == nil || o.Valid == nil {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullBool) GetValidOk() (*bool, bool) {
	if o == nil || o.Valid == nil {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *NullBool) HasValid() bool {
	if o != nil && o.Valid != nil {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *NullBool) SetValid(v bool) {
	o.Valid = &v
}

func (o NullBool) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Bool != nil {
		toSerialize["Bool"] = o.Bool
	}
	if o.Valid != nil {
		toSerialize["Valid"] = o.Valid
	}
	return json.Marshal(toSerialize)
}

type NullableNullBool struct {
	value *NullBool
	isSet bool
}

func (v NullableNullBool) Get() *NullBool {
	return v.value
}

func (v *NullableNullBool) Set(val *NullBool) {
	v.value = val
	v.isSet = true
}

func (v NullableNullBool) IsSet() bool {
	return v.isSet
}

func (v *NullableNullBool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullBool(val *NullBool) *NullableNullBool {
	return &NullableNullBool{value: val, isSet: true}
}

func (v NullableNullBool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullBool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


